version: 2017.06.06.0

field_defaults:
  type: string
  doc_values: true
  index: not_analyzed

_default_:
  type: group
  description: >
    Contains common fields and generic pattern-matched field descriptions; this
    is what populates the actual mappings of _default_ in the template's mapping
    section.
  fields:
    - name: "@timestamp"
      type: date
      format: yyyy-MM-dd HH:mm:ss,SSSZ||yyyy-MM-dd'T'HH:mm:ss.SSSSSSZ||yyyy-MM-dd'T'HH:mm:ssZ||dateOptionalTime
      example: 2015-01-24T14:06:05.071Z
      description: >
        UTC value marking when the log payload was created, or when log payload was first collected if the creation time is not known;
        this is the log processing pipeline’s “best effort” determination of when the log payload was generated
        FYI: the “@” prefix convention to note a field as being reserved for a particular use; in this case, most tools by default look for “@timestamp” with ElasticSearch
      fields:
        - name: raw
          ignore_above: 256
          type: string

    - name: geoip
      description: >
        geo-ip of the machine
      type: object
      object_struct:
        dynamic: True
        properties:
          location:
            type: geo_point

    - name: hostname
      type: string
      description: >
        FQDN of the entity generating the original payload
        This field is a best effort attempt to derive this context; sometimes the entity generating it knows it; other times that entity has a restricted namespace itself, and the collector or normalizer knows that

    - name: ipaddr4
      type: ip
      description: >
        IP address v4 of the source server, can be an array.
      fields:
        - name: raw
          ignore_above: 256
          type: string
      norms:
        enabled: false

    - name: ipaddr6
      type: string
      description: >
        IP address v6 of the source server(if available).

    - name: level
      type: string
      example: info
      description: >
        Logging level as provided by: rsyslog(severitytext property), python's
        logging module, etc.
        Possible values are as listed here: http://sourceware.org/git/?p=glibc.git;a=blob;f=misc/sys/syslog.h;h=ee01478c4b19a954426a96448577c5a76e6647c0;hb=HEAD#l74 plus trace
        That is: alert crit debug emerg err info notice trace warning
        Note that `trace` isn't in the syslog.h list but many applications use it
        `trace` should be considered the highest (most verbose) level, higher than `debug`
        `error` should be converted to `err`
        `panic` should be converted to `emerg`
        `warn` should be converted to `warning`
        Numeric values from syslog/journal PRIORITY can usually be mapped using the priority values as listed here:
        http://sourceware.org/git/?p=glibc.git;a=blob;f=misc/sys/syslog.h;h=ee01478c4b19a954426a96448577c5a76e6647c0;hb=HEAD#l51
        That is, 0 -> emerg, 1 -> alert, ..., 7 -> debug
        Log levels/priorities from other logging systems should be mapped to the nearest match
        For example, from python logging: https://docs.python.org/2.7/library/logging.html#logging-levels
        CRITICAL -> crit, ERROR -> err, ...., DEBUG -> debug

    - name: message
      type: string
      index: analyzed
      doc_values: false
      example: TODO
      description: >
        Typical log entry message, or payload, possibly stripped of metadata
        pulled out of it by collector/normalizer, UTF-8 encoded.
      norms:
        enabled: false

    - name: pid
      type: string
      description: >
        This is the process ID of the logging entity, if available.

    - name: service
      type: string
      description: >
        Name of the service associated with the logging entity, if available.
        For example, syslog's APP-NAME and rsyslog's programname property are
        mapped to the service field.

    - name: tags
      type: string
      doc_values: false
      index: analyzed
      analyzer: whitespace
      description: >
        Optionally provided operator defined list of tags placed on each log
        by the collector or normalizer. The payload can be a string with
        whitespace-delimited string tokens, or a JSON list of string tokens.

    - name: file
      type: string
      index: analyzed
      doc_values: false
      description: >
        Optional path to the file containing the log entry local to the
        collector
        TODO: analyzer for file paths
      norms:
        enabled: True
      fields:
        - name: raw
          type: string
          ignore_above: 256

    - name: offset
      type: long
      description: >
        The offset value can represent bytes to the start of the log line in the
        file (zero or one based), or log line numbers (zero or one based), so
        long as the values are strictly monotonically increasing in the context
        of a single log file. They values are allowed to wrap, representing a
        new version of the log file (rotation).

    - name: namespace_name
      type: string
      example: my-cool-project-in-lab04
      doc_values: false
      index: not_analyzed
      description: >
        format [a-zA-Z][a-zA-Z0-9-]{0,61}[a-zA-Z0-9]
        Associate this record with the namespace with this name.
        This value will not be stored.  It is only used to associate the
        record with the appropriate namespace for access control and
        visualization.  Normally this value will be given in the tag, but if the
        protocol does not support sending a tag, this field can be used.
        If this field is present, it will override the
        namespace given in the tag or in kubernetes.namespace_name.
        The format is the same format used for Kubernetes namespace names.
        See also namespace_uuid.

    - name: namespace_uuid
      type: string
      example: 82f13a8e-882a-4344-b103-f0a6f30fd218
      description: >
        format [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
        The uuid associated with the namespace_name.
        This value will not be stored.  It is only used to associate the
        record with the appropriate namespace for access control and
        visualization.  If this field is present, it will override the
        uuid given in kubernetes.namespace_uuid.  This will also cause
        the Kubernetes metadata lookup to be skipped for this log record.
