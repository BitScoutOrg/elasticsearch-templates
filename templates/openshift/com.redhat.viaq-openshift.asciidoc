
////
This file is generated! See fields.yml and scripts/generate_field_docs.py
////

[[exported-fields]]
== Exported Fields

This document describes the fields that are exported by com.redhat.viaq-openshift. They are
grouped in the following categories:

* <<exported-fields-Default>>
* <<exported-fields-rsyslog>>
* <<exported-fields-systemd>>
* <<exported-fields-kubernetes>>
* <<exported-fields-docker>>
* <<exported-fields-pipeline_metadata>>
* <<exported-fields-ovirt>>

[[exported-fields-Default]]
=== Top Level Fields

Contains common fields and generic pattern-matched field descriptions; this is what populates the actual mappings of _default_ in the template's mapping section.



==== @timestamp

type: date

example: 2015-01-24 14:06:05.071000

format: yyyy-MM-dd'T'HH:mm:ss.SSSSSSZ||yyyy-MM-dd'T'HH:mm:ssZ||dateOptionalTime

UTC value marking when the log payload was created, or when log payload was first collected if the creation time is not known; this is the log processing pipeline’s “best effort” determination of when the log payload was generated FYI: the “@” prefix convention to note a field as being reserved for a particular use; in this case, most tools by default look for “@timestamp” with ElasticSearch


==== geoip

type: object

geo-ip of the machine


==== hostname

type: string

FQDN of the entity generating the original payload This field is a best effort attempt to derive this context; sometimes the entity generating it knows it; other times that entity has a restricted namespace itself, and the collector or normalizer knows that


==== ipaddr4

type: ip

IP address v4 of the source server, can be an array.


==== ipaddr6

type: string

IP address v6 of the source server(if available).


==== level

type: string

example: info

Logging level as provided by: rsyslog(severitytext property), python's logging module, etc. Possible values are as listed here: http://sourceware.org/git/?p=glibc.git;a=blob;f=misc/sys/syslog.h;h=ee01478c4b19a954426a96448577c5a76e6647c0;hb=HEAD#l74 plus trace That is: alert crit debug emerg err info notice trace warning Note that `trace` isn't in the syslog.h list but many applications use it `trace` should be considered the highest (most verbose) level, higher than `debug` `error` should be converted to `err` `panic` should be converted to `emerg` `warn` should be converted to `warning` Numeric values from syslog/journal PRIORITY can usually be mapped using the priority values as listed here: http://sourceware.org/git/?p=glibc.git;a=blob;f=misc/sys/syslog.h;h=ee01478c4b19a954426a96448577c5a76e6647c0;hb=HEAD#l51 That is, 0 -> emerg, 1 -> alert, ..., 7 -> debug Log levels/priorities from other logging systems should be mapped to the nearest match For example, from python logging: https://docs.python.org/2.7/library/logging.html#logging-levels CRITICAL -> crit, ERROR -> err, ...., DEBUG -> debug


==== message

type: string

example: TODO

Typical log entry message, or payload, possibly stripped of metadata pulled out of it by collector/normalizer, UTF-8 encoded.


==== pid

type: string

This is the process ID of the logging entity, if available.


==== service

type: string

Name of the service associated with the logging entity, if available. For example, syslog's APP-NAME and rsyslog's programname property are mapped to the service field.


==== tags

type: string

Optionally provided operator defined list of tags placed on each log by the collector or normalizer. The payload can be a string with whitespace-delimited string tokens, or a JSON list of string tokens.


==== file

type: string

Optional path to the file containing the log entry local to the collector TODO: analyzer for file paths


==== offset

type: long

The offset value can represent bytes to the start of the log line in the file (zero or one based), or log line numbers (zero or one based), so long as the values are strictly monotonically increasing in the context of a single log file. They values are allowed to wrap, representing a new version of the log file (rotation).


==== namespace_name

type: string

example: my-cool-project-in-lab04

format [a-zA-Z][a-zA-Z0-9-]{0,61}[a-zA-Z0-9] Associate this record with the namespace with this name. This value will not be stored.  It is only used to associate the record with the appropriate namespace for access control and visualization.  Normally this value will be given in the tag, but if the protocol does not support sending a tag, this field can be used. If this field is present, it will override the namespace given in the tag or in kubernetes.namespace_name. The format is the same format used for Kubernetes namespace names. See also namespace_uuid.


==== namespace_uuid

type: string

example: 82f13a8e-882a-4344-b103-f0a6f30fd218

format [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12} The uuid associated with the namespace_name. This value will not be stored.  It is only used to associate the record with the appropriate namespace for access control and visualization.  If this field is present, it will override the uuid given in kubernetes.namespace_uuid.  This will also cause the Kubernetes metadata lookup to be skipped for this log record.


[[exported-fields-rsyslog]]
=== rsyslog Fields

RFC5424 based metadata.



==== rsyslog.facility

type: string

rsyslog's facility. see syslog specification for more information


==== rsyslog.protocol-version

type: string

rsyslog protocol version


==== rsyslog.structured-data

type: string

syslog's structured-data. see syslog specification for more information


==== rsyslog.msgid

type: long

syslog's msgid field


==== rsyslog.appname

type: string

syslog's APP-NAME. If APP-NAME is same as programname, we only fill top-level field 'service'. If APP-NAME is not equal to programname, this field will hold APP-NAME. See syslog specification for more information


[[exported-fields-systemd]]
=== systemd Fields

Contains common fields specific to systemd journal. For more information please see https://www.freedesktop.org/software/systemd/man/systemd.journal-fields.html



[[exported-fields-k]]
=== systemd.k Fields

systemd's kernel-specific metadata.



==== systemd.k.KERNEL_DEVICE

type: string

TODO


==== systemd.k.KERNEL_SUBSYSTEM

type: string

TODO


==== systemd.k.UDEV_DEVLINK

type: string

TODO


==== systemd.k.UDEV_DEVNODE

type: string

TODO


==== systemd.k.UDEV_SYSNAME

type: string

TODO


[[exported-fields-t]]
=== systemd.t Fields

TODO.



==== systemd.t.AUDIT_LOGINUID

type: string

TODO


==== systemd.t.BOOT_ID

type: string

TODO


==== systemd.t.AUDIT_SESSION

type: string

TODO


==== systemd.t.CAP_EFFECTIVE

type: string

TODO


==== systemd.t.CMDLINE

type: string

TODO


==== systemd.t.COMM

type: string

TODO


==== systemd.t.EXE

type: string

TODO


==== systemd.t.GID

type: string

TODO


==== systemd.t.HOSTNAME

type: string

TODO


==== systemd.t.MACHINE_ID

type: string

TODO


==== systemd.t.PID

type: string

TODO


==== systemd.t.SELINUX_CONTEXT

type: string

TODO


==== systemd.t.SOURCE_REALTIME_TIMESTAMP

type: string

TODO


==== systemd.t.SYSTEMD_CGROUP

type: string

TODO


==== systemd.t.SYSTEMD_OWNER_UID

type: string

TODO


==== systemd.t.SYSTEMD_SESSION

type: string

TODO


==== systemd.t.SYSTEMD_SLICE

type: string

TODO


==== systemd.t.SYSTEMD_UNIT

type: string

TODO


==== systemd.t.SYSTEMD_USER_UNIT

type: string

TODO


==== systemd.t.TRANSPORT

type: string

TODO


==== systemd.t.UID

type: string

TODO


[[exported-fields-u]]
=== systemd.u Fields

TODO.



==== systemd.u.CODE_FILE

type: string

TODO


==== systemd.u.CODE_FUNCTION

type: string

TODO


==== systemd.u.CODE_LINE

type: string

TODO


==== systemd.u.ERRNO

type: string

TODO


==== systemd.u.MESSAGE_ID

type: string

TODO


==== systemd.u.RESULT

type: string

TODO


==== systemd.u.UNIT

type: string

TODO


[[exported-fields-kubernetes]]
=== kubernetes Fields

Namespace for kubernetes-specific metadata



==== kubernetes.pod_name

type: string

The name of the pod


[[exported-fields-labels]]
=== kubernetes.labels Fields

Labels attached to the OpenShift object Each label name is a subfield of labels field. Each label name is de-dotted: dots in the name are replaced with underscores.


==== kubernetes.pod_id

type: string

Kubernetes ID of the pod.


==== kubernetes.namespace_name

type: string

The name of the namespace in Kubernetes.


==== kubernetes.namespace_id

type: string

ID of the namespace in Kubernetes.


==== kubernetes.host

type: string

Kubernetes node name


[[exported-fields-docker]]
=== docker Fields

Namespace for docker container-specific metadata



==== docker.container_id

type: string

Docker container id


[[exported-fields-pipeline_metadata]]
=== pipeline_metadata Fields

Metadata related to ViaQ log collection pipeline. Everything about log collector, normalizers, mappings goes here. Data in this subgroup is stored for troublehsooting purposes mostly.



==== pipeline_metadata.@version

type: string

example: TODO

Version of “com.redhat.viaq” mapping the document is intended to adhere by the normalizer. It must be set by the normalizer. The value must correspond to the [_meta][version].


[[exported-fields-collector]]
=== pipeline_metadata.collector Fields

The section contains metadata specific to the collector.



==== pipeline_metadata.collector.hostname

type: string

FQDN of the collector. It might be different from the FQDN of the actual emitter of the logs.


==== pipeline_metadata.collector.name

type: string

Name of the collector.


==== pipeline_metadata.collector.version

type: string

Version of the collector


==== pipeline_metadata.collector.ipaddr4

type: ip

IP address v4 of the collector server, can be an array.


==== pipeline_metadata.collector.ipaddr6

type: string

IP address v6 of the collector server, can be an array.


==== pipeline_metadata.collector.inputname

type: string

how the log message was received on the collector whether it was TCP/UDP, or maybe imjournal/imfile.


==== pipeline_metadata.collector.received_at

type: date

format: yyyy-MM-dd'T'HH:mm:ss.SSSSSSZ||yyyy-MM-dd'T'HH:mm:ssZ||dateOptionalTime

Time when the message was received at the collector.


==== pipeline_metadata.collector.original_raw_message

type: string

The original non-parsed log message, collected by collector or as close to the source as possible.


[[exported-fields-normalizer]]
=== pipeline_metadata.normalizer Fields

The section contains metadata specific to the normalizer.



==== pipeline_metadata.normalizer.hostname

type: string

FQDN of the normalizer.


==== pipeline_metadata.normalizer.name

type: string

Name of the normalizer.


==== pipeline_metadata.normalizer.version

type: string

Version of the normalizer


==== pipeline_metadata.normalizer.ipaddr4

type: ip

IP address v4 of the normalizer server, can be an array.


==== pipeline_metadata.normalizer.ipaddr6

type: string

IP address v6 of the normalizer server, can be an array.


==== pipeline_metadata.normalizer.inputname

type: string

how the log message was received on the normalizer whether it was TCP/UDP.


==== pipeline_metadata.normalizer.received_at

type: date

format: yyyy-MM-dd'T'HH:mm:ss.SSSSSSZ||yyyy-MM-dd'T'HH:mm:ssZ||dateOptionalTime

Time when the message was received at the collector.


==== pipeline_metadata.normalizer.original_raw_message

type: string

The original non-parsed log message as it is received at the normalizer.


==== pipeline_metadata.trace

type: string

example: rsyslog,8.16,2016.02.01 logstash,1.5,2016.03.03

The field records the trace of the message. Each collector/normalizer appends information about itself and the date/time when the message was processed.


[[exported-fields-ovirt]]
=== ovirt Fields

Namespace for ovirt metadata.



==== ovirt.entity

type: string

The type of the data source, hosts, vms, engine etc.


==== ovirt.host_id

type: string

The oVirt host UUID.


[[exported-fields-engine]]
=== ovirt.engine Fields

Namespace for oVirt engine related metadata.



==== ovirt.engine.fqdn

type: string

FQDN of the oVirt engine.


